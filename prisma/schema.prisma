// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String   @default("https://example.com/default.jpg")
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  comments Comment[]
  blogTag  BlogTag[] @relation("Blogtags")
}

model BlogTag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  blogs Blog[] @relation("Blogtags")
}

model User {
  id       String    @id @default(uuid())
  username String    @unique
  email    String    @unique
  password String
  role     Role      @default(USER)
  blogs    Blog[]
  profile  Profile?
  comments Comment[]
}

enum Role {
  USER
  ADMIN
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId String

  blog   Blog   @relation(fields: [blogId], references: [id],onDelete: Cascade)
  blogId String

  likesCount   Int @default(0)
  unlikesCount Int @default(0)

  createdAt DateTime @default(now())
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}
